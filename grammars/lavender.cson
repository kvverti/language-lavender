# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

scopeName: 'source.lavender'
name: 'Lavender'
fileTypes: [
    'lv'
]
foldingStartMarker: '\\(|\\[|\\{'
foldingStopMarker: '\\)|\\]|\\}'
patterns: [
    { include: '#commandImport' }
    { include: '#commandQuit' }
    { include: '#commandBasic' }
    { include: '#expression' }
]
repository:
    comment:
        comment: 'Single line comment'
        match: '\'.*$'
        name: 'comment.line.quote.lavender'
    namespace:
        comment: 'Namespace'
        match: '[a-zA-Z_][a-zA-Z_0-9]*:'
        name: 'support.constant.namespace.lavender'
    symbol:
        comment: 'Symbolic name'
        match: '[~!%\\^\\&*\\-+=|<>/?:]+'
        name: 'support.function.symbolic.lavender'
    variable:
        comment: 'Variable (begins lowercase or with a single underscore)'
        match: '_?[a-z][a-zA-Z0-9]*'
        name: 'variable.lavender'
    constant:
        comment: 'Constant value (begins uppercase or with two underscores)'
        match: '_?[A-Z_][a-zA-Z_0-9]*'
        name: 'support.constant.value.lavender'
    number:
        comment: 'Number'
        match: '\\d*\\.?\\d+([eE][+-]?\\d+)?'
        name: 'constant.numeric.lavender'
    string:
        comment: 'String'
        begin: '"'
        end: '"'
        name: 'string.quoted.double.lavender'
        patterns: [
            {
                comment: 'String escapes'
                match: '\\\\.'
                name: 'keyword.operator.string-escape.lavender'
            }
        ]
    funcValue:
        comment: 'Function value'
        match: '\\\\((?:[a-zA-Z_][a-zA-Z_0-9]*):)?((?:[a-zA-Z_][a-zA-Z_0-9]*)|[~!%\\^\\&*\\-+=|<>/?:]+)\\\\?'
        name: 'meta.function-value.lavender'
        captures:
            1: name: 'support.constant.namespace.lavender'
            2: name: 'support.function.value.lavender'
    funcCall:
        comment: 'Function value when calling'
        match: '[a-zA-Z_][a-zA-Z_0-9]*\\s*(?=\\()'
        name: 'support.function.call.lavender'
    funcName:
        comment: 'Function declared name'
        match: '([uir]_)?((?:[a-zA-Z_][a-zA-Z_0-9]*)|[~!%\\^\\&*\\-+=|<>/?:]+)'
        name: 'meta.function.name.lavender'
        captures:
            1: name: 'keyword.control.function.prefix.lavender'
            2: name: 'support.function.declaration.lavender'
    argList:
        comment: 'Function parameter list'
        begin: '\\('
        end: '\\)'
        beginCaptures:
            0: name: 'punctuation.params.lparen.lavender'
        endCaptures:
            0: name: 'punctuation.params.rparen.lavender'
        name: 'meta.arg-list.lavender'
        patterns: [
            { include: '#comment' }
            { include: '#keyword' }
            {
                comment: 'Formal parameter name'
                match: '[a-zA-Z_][a-zA-Z_0-9]*'
                name: 'variable.parameter.formal.lavender'
            }
            {
                comment: 'By name modifier'
                match: '=>'
                name: 'storage.modifier.byname.lavender'
            }
            {
                comment: 'Varargs modifier'
                match: '\\.\\.\\.'
                name: 'storage.modifier.varargs.lavender'
            }
        ]
    funcSig:
        comment: 'Function signature'
        begin: '\\bdef\\b'
        end: '(?==>)'
        beginCaptures:
            0: name: 'storage.type.def.lavender'
        name: 'meta.function.header.lavender'
        patterns: [
            { include: '#comment' }
            { include: '#letExpr' }
            { include: '#funcName' }
            { include: '#argList' }
        ]
    letDefinition:
        comment: 'Single function local definition'
        begin: '\\('
        end: '\\)'
        name: 'meta.let-expr.definition.lavender'
        beginCaptures:
            1: name: 'punctuation.let-expr.lparen.lavender'
        endCaptures:
            1: name: 'punctuation.let-expr.rparen.lavender'
        name: 'meta.let-definition.lavender'
        patterns: [
            { include: '#expression' }
        ]
    letExpr:
        comment: 'Function local declarations'
        begin: '\\blet\\b'
        end: '(?==>)'
        beginCaptures:
            0: name: 'storage.type.let.lavender'
        name: 'meta.let-expr.lavender'
        patterns: [
            { include: '#comment' }
            { include: '#keyword' }
            { include: '#letDefinition' }
            {
                comment: 'Function local name'
                match: '[a-zA-Z_][a-zA-Z_0-9]*'
                name: 'variable.parameter.local.lavender'
            }
        ]
    doExpr:
        comment: 'Imperative-style monadic comprehension'
        begin: '\\bdo\\b'
        end: '(?=\\})'
        beginCaptures:
            0: name: 'keyword.control.do.lavender'
        name: 'meta.do-expr.lavender'
        patterns: [
            { include: '#doBlock' }
        ]
    doBlock:
        comment: 'Do expression body'
        begin: '\\{'
        end: '(?=\\})'
        name: 'meta.do-block.lavender'
        patterns: [
            { include: '#letGenerator' }
            { include: '#expression' }
        ]
    letGenerator:
        comment: 'New value binding in do expression'
        begin: '\\blet\\b'
        end: '<-[^~!%\\^\\&*\\-+=|<>/?:]'
        beginCaptures:
            0: name: 'storage.type.let.lavender'
        endCaptures:
            0: name: 'keyword.control.gets.lavender'
        name: 'meta.let-generator.lavender'
        patterns: [
            { include: '#comment' }
            { include: '#keyword' }
            {
                comment: 'Let bound name'
                match: '[a-zA-Z_][a-zA-Z_0-9]*'
                name: 'variable.parameter.formal.lavender'
            }
        ]
    parenExpression:
        comment: 'Parenthesized expression'
        begin: '\\('
        end: '\\)'
        beginCaptures:
            0: name: 'punctuation.expression.lparen.lavender'
        endCaptures:
            0: name: 'punctuation.expression.rparen.lavender'
        name: 'meta.paren-expression.lavender'
        patterns: [
            { include: '#expression' }
        ]
    bracketExpression:
        comment: 'Bracketed expression'
        begin: '\\['
        end: '\\]'
        beginCaptures:
            0: name: 'punctuation.expression.lbracket.lavender'
        endCaptures:
            0: name: 'punctuation.expression.rbracket.lavender'
        name: 'meta.bracket-expression.lavender'
        patterns: [
            { include: '#expression' }
        ]
    braceExpression:
        comment: 'Brace expression'
        begin: '\\{'
        end: '\\}'
        beginCaptures:
            0: name: 'punctuation.expression.lbrace.lavender'
        endCaptures:
            0: name: 'punctuation.expression.rbrace.lavender'
        name: 'meta.bracket-expression.lavender'
        patterns: [
            { include: '#expression' }
        ]
    expression:
        comment: 'Expression'
        patterns: [
            { include: '#comment' }
            { include: '#number' }
            { include: '#string' }
            { include: '#funcValue' }
            { include: '#standardConstants' }
            { include: '#doExpr' }
            { include: '#funcSig' }
            { include: '#funcCall' }
            { include: '#keyword' }
            { include: '#namespace' }
            { include: '#variable' }
            { include: '#constant' }
            { include: '#symbol' }
            { include: '#parenExpression' }
            { include: '#bracketExpression' }
            { include: '#braceExpression' }
        ]
    keyword:
        comment: 'Keywords'
        match: '(=>[^~!%\\^\\&*\\-+=|<>/?:])|(<-[^~!%\\^\\&*\\-+=|<>/?:])|(\\bdef\\b)|(\\bdo\\b)|(\\blet\\b)|(\\bnative\\b)'
        captures:
            1: name: 'keyword.control.arrow.lavender'
            2: name: 'keyword.control.gets.lavender'
            3: name: 'storage.type.def.lavender'
            4: name: 'keyword.control.do.lavender'
            5: name: 'storage.type.let.lavender'
            6: name: 'keyword.control.native.lavender'
    standardConstants:
        comment: 'Standard constants'
        match: '(true)|(false)|(undefined)'
        captures:
            1: name: 'support.constant.predef.true.lavender'
            2: name: 'support.constant.predef.false.lavender'
            3: name: 'support.constant.predef.undefined.lavender'
    commandBasic:
        comment: 'Pre-command'
        match: '^\\s*@[a-z]*'
        name: 'keyword.control.command.lavender'
    commandQuit:
        comment: 'Quit command'
        match: '^\\s*@quit'
        name: 'keyword.control.command.quit.lavender'
    commandImport:
        comment: 'Import command'
        begin: '^\\s*(@import)(\\s+[A-Za-z0-9]*)?(\\s+using)?'
        end: '$'
        beginCaptures:
            1: name: 'keyword.control.command.import.lavender'
            2: name: 'support.constant.namespace.lavender'
            3: name: 'keyword.control.command-help.using.lavender'
        patterns: [
            {
                comment: 'Underscore'
                match: '\\b_\\b'
                name: 'keyword.control.underscore.lavender'
            }
            {
                comment: 'Alias'
                match: '([^,]+?)(?:(\\bas\\b)([^,]+?))?'
                captures:
                    1: name: 'support.function.import.lavender'
                    2: name: 'keyword.control.command-help.as.lavender'
                    3: name: 'support.function.alias.lavender'
            }
        ]
